#include <hal/screen.hpp>

#include <Arduino.h>
#include <SPI.h>

namespace hal {

    static std::uint8_t s_enablePin;
    static std::uint8_t s_chipSelectPin;
    static std::array<std::uint8_t, Screen::Width * Screen::Height> s_frameBuffer = {};
    static bool s_turnedOn = true;

    void Screen::init(std::uint8_t sck, std::uint8_t miso, std::uint8_t mosi, std::uint8_t cs, std::uint8_t en) {
        ::pinMode(sck,  OUTPUT);
        ::pinMode(miso, INPUT);
        ::pinMode(mosi, OUTPUT);
        ::pinMode(cs,   OUTPUT);
        ::pinMode(en,   OUTPUT);

        SPI.pins(sck, miso, mosi, cs);
        SPI.begin();
        SPI.beginTransaction(SPISettings(10000000, MSBFIRST, SPI_MODE0));
        s_enablePin = en;
        s_chipSelectPin = cs;
        s_turnedOn = true;

        clear();
    }

    constexpr static std::array LedPositions = {
        0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
        0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
        0x4F, 0x4E, 0x4D, 0x4C, 0x4B, 0x4A, 0x49, 0x48, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
        0x47, 0x46, 0x45, 0x44, 0x43, 0x42, 0x41, 0x40, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x67, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61, 0x60, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
        0x6F, 0x6E, 0x6D, 0x6C, 0x6B, 0x6A, 0x69, 0x68, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
        0x8F, 0x8E, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
        0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
        0xA7, 0xA6, 0xA5, 0xA4, 0xA3, 0xA2, 0xA1, 0xA0, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7,
        0xAF, 0xAE, 0xAD, 0xAC, 0xAB, 0xAA, 0xA9, 0xA8, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
        0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA, 0xC9, 0xC8, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
        0xC7, 0xC6, 0xC5, 0xC4, 0xC3, 0xC2, 0xC1, 0xC0, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
        0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
        0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
    };

    void Screen::update() {
        if (!s_turnedOn) {
            return;
        }

        static std::uint32_t sendBuffer[(Width * Height + 8 * sizeof(std::uint32_t) - 1) / 8 / sizeof(std::uint32_t)] = { };
        auto *bits = reinterpret_cast<std::uint8_t*>(sendBuffer);

        std::memset(bits, 0x00, Width * Height / 8);

        static std::uint32_t counter = 0;
        for (std::uint32_t led = 0; led < Width * Height; led += 1) {
            std::uint8_t threshold = counter & 0xFF;
            bits[led >> 3] |= (s_frameBuffer[LedPositions[led]] > threshold ? 0x80 : 0x00) >> (led & 7);
        }
        counter += (256 / BrightnessLevels);

        ::digitalWrite(s_chipSelectPin, LOW);
        SPI.writeBytes(bits, sizeof(sendBuffer));
        ::digitalWrite(s_chipSelectPin, HIGH);
    }

    void Screen::setPixel(std::int8_t x, std::int8_t y, std::uint8_t brightness) {
        if (!s_turnedOn) brightness = 0x00;
        if (x < 0 || x >= Height || y < 0 || y >= Width) {
            return; // Out of bounds
        }

        s_frameBuffer[x + y * Height] = brightness;
    }

    void Screen::setPixelNoOverwrite(std::int8_t x, std::int8_t y, std::uint8_t brightness) {
        if (!s_turnedOn) brightness = 0x00;
        if (x < 0 || x >= Height || y < 0 || y >= Width) {
            return; // Out of bounds
        }

        auto &currentBrightness = s_frameBuffer[x + y * Height];
        if (currentBrightness == 0x00)
            currentBrightness = brightness;
    }

    std::uint8_t Screen::getPixel(std::int8_t x, std::int8_t y) {
        return (x < 0 || x >= Height || y < 0 || y >= Width) ? 0x00 : s_frameBuffer[x + y * Height];
    }


    void Screen::setAllPixels(const std::array<std::uint8_t, Width * Height> &pixels) {
        for (std::size_t i = 0; i < pixels.size(); ++i) {
            s_frameBuffer[i] = pixels[i];
        }
    }


    void Screen::clear(std::uint8_t brightness) {
        std::fill(s_frameBuffer.begin(), s_frameBuffer.end(), brightness);
    }

    bool Screen::isTurnedOn() {
        return s_turnedOn;
    }

    void Screen::turnOff() {
        s_turnedOn = false;
    }

    void Screen::turnOn() {
        s_turnedOn = true;
    }

}